const Gallery = require('../models/GallerySchema');

exports.addGallery = async (req,res)=>{

    try {
        const {Title} = req.body
        // Map through each file and get its path
        const images = req.files.map(file => `/uploads/${file.filename}`);
        const newGallery = new Gallery({Title,Images: images });
        await newGallery.save();
        res.status(201).json({message: 'Gallery entry created',gallery: newGallery })
    } catch (error) {
        res.status(500).json({ message: 'Error adding gallery entry', error });
    }

}


exports.getGallery = async (req,res)=>{
    try {
        const gallery = await Gallery.find({});
        res.status(200).json(gallery); 

    } catch (error) {
        res.status(400).json({error: error.message})
    }
}

exports.updateGallery = async (req, res) => {
    try {
      const { id } = req.params;
      const { Title, imagesToKeep, imagesToDelete } = req.body;
      const updatedData = {};
  
      // If Title is provided, update it as well
      if (Title) {
        updatedData.Title = Title;
      }
  
      // Initialize the Images array to hold updated images
      let updatedImages = [];
  
      // Add images that are meant to be kept (make sure imagesToKeep contains valid image URLs)
      if (imagesToKeep && Array.isArray(imagesToKeep) && imagesToKeep.length > 0) {
        updatedImages = [...imagesToKeep]; // Keep existing images
      }
  
      // If new images are uploaded, add them to the updatedImages array
      if (req.files && req.files.length > 0) {
        const newImages = req.files.map(file => `/uploads/${file.filename}`); // Save the file path
        updatedImages = [...updatedImages, ...newImages]; // Append new images
      }
  
      // Remove the deleted images from the Images array
      if (imagesToDelete && Array.isArray(imagesToDelete) && imagesToDelete.length > 0) {
        updatedImages = updatedImages.filter(image => !imagesToDelete.includes(image)); // Remove deleted images
      }
  
      updatedData.Images = updatedImages; // Final updated image array
  
      // Update the gallery document in the database
      const updatedGallery = await Gallery.findByIdAndUpdate(id, updatedData, { new: true });
  
      if (!updatedGallery) {
        return res.status(404).json({ message: 'Gallery not found' });
      }
  
      res.status(200).json({ message: 'Gallery updated successfully', updatedGallery });
    } catch (error) {
      res.status(500).json({ message: 'Error updating Gallery', error: error.message });
    }
  };
  
  
  
exports.deleteGallery = async (req,res)=>{
    const {id} = req.params;
    console.log("Deleting Gallery Data with ID:", id);
    try {
       const deletGallery = await Gallery.findByIdAndDelete(id); 
       if(!deletGallery){
        return res.status(404).json({message:"Gallery not found"});
    }
    res.status(200).json({message:"Gallery Deleted Successfully"})
    } catch (error) {
      res.status(500).json({error:error.message});
    }
    
    }


import moment from 'moment';
import Image from 'next/image';
import React, { useState, useRef, useEffect } from 'react';
import { MdDelete, MdModeEditOutline, } from "react-icons/md";
// import DataTable from 'react-data-table-component';
import axios from 'axios';
import DataTable from 'react-data-table-component';
import { FaRegEye } from 'react-icons/fa';
import { IoIosCloseCircleOutline } from 'react-icons/io';

export default function AddGallery() {
  const [imagePreview, setImagePreview] = useState([]);
  const [isModalOpen,setIsModalOpen]=useState(false);
  const [selectedIndex, setSelectedIndex] = useState(null); // State for selected gallery index
  const [gallery, setGallery] = useState([]);
  const [formData, setFormData] = useState({
    Title: '',
    images: [],
    imagesToDelete: [],
    imagesToKeep:[],
    
  });
  const [isEditing, setIsEditing] = useState(false);
  const [editIndex, setEditIndex] = useState(null);

  const fileInputRef = useRef(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/gallery/get-gallery');
        setGallery(response.data);
        console.log("Gallery data fetched:", response.data);
      } catch (error) {
        console.error("Error fetching gallery data:", error.message);
        if (error.response) {
          // If the error has a response, it means the server responded with an error status code
          console.error("Server responded with:", error.response.status, error.response.data);
        } else if (error.request) {
          // If the error has a request but no response, it means the request was made but no response received
          console.error("No response received from server");
        } else {
          // Otherwise, an unknown error occurred
          console.error("Unexpected error:", error.message);
        }
      }
    };
  fetchData();
},[])

const openModal = (index)=>{
  setIsModalOpen(true);
  setSelectedIndex(index)
}
const closeModal = () => {
  setIsModalOpen(false);
  setSelectedIndex(null);
};

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };
  const handleEditGallery = (index) => {
    const galleryItem = gallery[index];
    setFormData({
      Title: galleryItem.Title,
      images: galleryItem.Images, // Images being uploaded
      imagesToKeep: galleryItem.Images, // Keep existing images
      imagesToDelete: [] // Make sure it's initialized as empty when editing
    });
    setImagePreview(galleryItem.Images); // Add existing images to preview
    setIsEditing(true);
    setEditIndex(index);
  };
  
  const resetForm = () => {
    // setFormData({ Title: '', images: [], imagesToDelete: [] });
    setFormData({ Title: '',
      images: [],
  imagesToDelete: [],
  imagesToKeep: [] // Initialize imagesToKeep to an empty array  
    });
    setImagePreview([]);
    setIsEditing(false);
  };
  const handleAddPackage = async (e) => {
    e.preventDefault();
    const data = new FormData();
    data.append('Title', formData.Title);
    
    // Keep the existing images in the gallery (imagesToKeep should be used here)
    formData.imagesToKeep?.forEach((image) => {
      data.append('imagesToKeep', image); // Keep existing images
    });
    
    // Handle image additions (uploaded files)
    formData.images?.forEach((image) => {
      data.append('images', image); // Add new images
    });
    
    // Handle images to be deleted
    formData.imagesToDelete?.forEach((image) => {
      data.append('imagesToDelete', image); // Mark images for deletion
    });
    
    try {
      if (isEditing) {
        const galleryId = gallery[editIndex]._id; // Use the actual gallery item ID
        const response = await axios.put(`http://localhost:5000/api/gallery/update-gallery/${galleryId}`, data, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
          withCredentials: true,
        });
        
        setGallery(gallery.map((gal) => gal._id === galleryId ? response.data.updatedGallery : gal));
        resetForm();
        fileInputRef.current.value = null;
        console.log('Update response:', response.data);
      } else {
        const response = await axios.post('http://localhost:5000/api/gallery/add-gallery', data, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
          withCredentials: true,
        });
        
        setGallery([...gallery, response.data.gallery]);
        resetForm();
        fileInputRef.current.value = null;
      }
    } catch (error) {
      console.error('Error adding gallery entry', error);
      if (error.response) {
        console.error('Server responded with:', error.response.status, error.response.data);
      }
    }
  };
  
  
  

  const handleDeleteGallery = async(GalleryId)=>{
    const isConfirmed = window.confirm('Are you sure you want to delete this gallery images ? ');
    if(isConfirmed){
  try {
    const response = await axios.delete(`http://localhost:5000/api/gallery/delete-gallery/${GalleryId}`,{  withCredentials: true });
    console.log("Deleted the Gallery Images",response);
    setGallery((prevGallery) => prevGallery.filter((gal) => gal._id !== GalleryId));
  } catch (error) {
    console.error("Error deleting Gallery:", error.message);
  }
    }
  }

  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    const newPreviews = files.map((file) => URL.createObjectURL(file));
  
    setFormData((prev) => ({
      ...prev,
      images: [...(prev.images || []), ...files],
    }));
    setImagePreview((prev) => [...prev, ...newPreviews]);
  };
  const handleDeleteImagePreview = (index, isExisting) => {
    if (isExisting) {
      const updatedExistingImages = formData.images.filter((_, i) => i !== index);
      const deletedImage = formData.images[index];
      setFormData(prev => ({
        ...prev,
        images: updatedExistingImages,
        imagesToDelete: [...prev.imagesToDelete, deletedImage],
      }));
    } else {
      setImagePreview(prev => prev.filter((_, i) => i !== index));
      setFormData(prev => ({
        ...prev,
        images: prev.images.filter((_, i) => i !== index),
      }));
    }
  };




  const handlePopup = ()=>{
    setIsEditing(false);
        // Reset form and state
        setFormData({
         
         Title:""
        });
        setImagePreview('')
        fileInputRef.current.value = null;
  }

  const columns = [
    {
      name: 'Gallery  Title',
      selector: row => row.Title,
    },
    {
      name: 'Actions',
  
     cell:(row,index )=>(
      <FaRegEye size={24} className='cursor' onClick={()=>{openModal(index)}} />
     )

    },
    {
      name: 'Actions',
      cell: (row, index) => (
        <>
          <MdModeEditOutline size={24} className='cursor'  onClick={() => handleEditGallery(index)}/>
          <MdDelete size={24} className='cursor' onClick={()=>handleDeleteGallery(row._id)}/>
        </>
      ),
    },
  ];

  return (
    <>
      <section className='container-fluid'>
        <div className='row mt-5'>
          <div className='col-12 col-lg-4'>
            <form onSubmit={handleAddPackage} className='form'>
              <div className="col">
                <input type="text" name="Title" required value={formData.Title} onChange={handleChange} className="form-control" placeholder="Gallery Title" />
              </div>
              <div className="col mt-3">
                <input type="file"
                  multiple onChange={handleFileChange} className="form-control" ref={fileInputRef} />
              </div>
              <div className="image-preview mt-3">
              {imagePreview.length > 0 ? (
              imagePreview.map((image, index) => (
                <div key={index} style={{ position: 'relative', display: 'inline-block', marginRight: '5px' }}>
                <img src={image} width={50} height={50} alt='' loading='lazy' style={{ borderRadius: '5px' }} />
               <MdDelete size={16} style={{ position: 'absolute', top: 0, right: 0, cursor: 'pointer' }} onClick={() => handleDeleteImagePreview(index)} />
              </div>
                  ))): (
                <p>No images to preview</p> // Handle the case when no images are selected
              )}
              </div>
              <div className='mt-3'>
                <button type="submit" className='btn-add cw fs-16 fw6'>{isEditing ? "Update Images" : "Add Images"}</button>
                {isEditing &&    <button type="submit" onClick={handlePopup} className='btn-add cw fs-16 fw6 mt-3'>Cancel</button> }
              </div>
            </form>
          </div>
         {/* <div className='col-12 col-lg-8'>
          <h5>{gallery.Title}</h5>
         {
            gallery.map((items,index)=>{
              return(
         <div className='' key={index}>
   
                <Image src={items.Images} width={50} height={50} alt='image'/>
           
         </div>
            )
          })
        } */}
        {/* {gallery.map((items,index)=>{
          return(
            <div className=''key={index}>
            <h5 className='fs-24 '>{items.Title}</h5><div className=''>
              <div className='df fjse' >
                {items.Images.map((img)=>(
              <Image src={img} width={50} height={50} alt='Images'/>
            ))}
              </div>
            </div>
            </div>
        )
      })} 
          </div>*/}
           
          <div className='col-12 col-lg-8'>
            <div className='table'>
              <DataTable
                columns={columns}
                data={gallery}
                pagination
                responsive
                highlightOnHover
                noHeader
              />
            </div>
          </div>
        </div>
      </section>

      {/* Modal */}
      {isModalOpen && selectedIndex !== null && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal-content" >
            <div onClick={closeModal}  className="df fjfe cursor">
            <IoIosCloseCircleOutline size={24} color='#000' />
            </div>
            <h5>{gallery[selectedIndex].Title}</h5>
            <div className="df fjse fw gap16 mt32">
              {gallery[selectedIndex].Images.map((image, idx) => (
                <Image className='mt-3 br10' key={idx} src={image} width={100} height={100} alt='' loading='lazy' />
              ))}
            </div>
          </div>
        </div>
      )}

      <style jsx>{`

       .form {
          border: 1px solid #e0e0e0;
          padding: 1.5rem;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .btn-add {
          background-color: #28a745;
          color: white;
          border: none;
          padding: 12px;
          width: 100%;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: background-color 0.3s ease;
        }
        
        .btn-add:hover {
          background-color: #218838;
        }
        .table{
          border: 1px solid #e0e0e0;
          padding: 20px;
        }
            .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
        }
        .modal-content {
         border: 1px solid;
          background: white;
          padding: 20px;
          border-radius: 8px;
          width: 500px;
          height: 450px;
          overflow-X: auto;
          text-align: center;
        }
          @media only screen and(max-width: 520px){
              .modal-content {
          background: white;
          padding: 20px;
          border-radius: 8px;
          width: 100%;
          height: 400px;
          overflow-X: auto;
          text-align: center;
        }

          }

      `}</style>
    </>
  );
}
